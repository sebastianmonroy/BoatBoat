Note: I hope you don't mind that I sent you my entire project... I don't think it would have been suitable to export this big thing as a package, unfortunately. I hope it doesn't upset your grader-flow!

What I did was use my CS 6457 Game Design project as inspiration for a new shader. The game is about controlling a boat using 4 players doing various tasks. Currently only one controller is supported, but you can't do much of anything yet anyway, though the infrastructure is in place for it... We had a simpler WASD control scheme originally, but the InControl plugin (responsible for easy controller support) broke it, so the demo is a bit boring for now, I'm afraid!

Anyway, the water was looking super un-watery so I decided I wanted to make it reflective. I looked at Unity Pro's neat built-in Water4 shaders which are pretty impressive looking, but I noticed that the reflections it produced were flat. That is, the shape of the water mesh did not distort the reflections in any way. This bothered me. So I tried to fix it!

In the "_Scenes\playtestScene Diffuse.unity" scene you can see how the water looked originally. In the "_Scenes\playtestScene Reflective.unity" scene you can see what it looks like now, with realtime reflections! 

First of all, the way the "Ocean Mesh" object works is by using a couple of Perlin noise calculations to determine how to shift the vertices of the mesh up and down in realtime. The same calculations are used to generate a texture for the mesh in order to color the high points of the mesh a light blue color and the low points of the mesh a dark blue color. The "RealtimeCubemap.cs" script, attached to the "Ocean Mesh" object, creates a camera called "Cubemap Camera" that mirrors the Main Camera underneath the surface of the water. The "Cubemap Camera" aims at the same point as the Main Camera and the script uses it to update a RenderTexture that acts as a cubemap. This cubemap is then plugged into the _Cube parameter of the "Mesh Water.shader", also attached to the "Ocean Mesh" object. Then the shader uses the normals of each of the triangles in the mesh to determine what the reflection should look like for each triangle. The "Ocean Mesh" object's _MainTex parameter updated every frame with the aforementioned light/dark blue colored texture. Then it is a simple matter of lerping between the _MainTex color and the calculated reflective color.

The "Ocean Mesh" is circular and follows the player around wherever they go. This was to prevent the whole map from requiring a procedurally generated mesh which was extremely computationally expensive. The boat also dips and bobs in the mesh, despite the mesh not having a collider (which would have also been very expensive) using the same Perlin noise calculations to find where the left, right, forward, and back extremes of the boat should rest, then using some gross geometry to rotate the boat to fit those positions.

If you wait long enough in the demo, you'll see an enemy boat deviate from its patrol waypoints and come into view trying to flank you, which is kind of fun. :)

REQUIREMENTS:
In the Assets folder, you can look at "Screenshot Diffuse.png" and "Screenshot Reflective.png" to see before and after pictures, respectively.
In the Assets\_Shaders folder you'll find the "Mesh Water.shader" that was used for the reflective water mesh.